{"version":3,"sources":["App.module.css","Button.jsx","Counter.jsx","CounterSettings.jsx","LocStorFunctions.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","Button","onClick","props","name","upCount","countReset","setCount","alert","render","className","styles","button","disabled","React","Component","Counter","classCount","state","upError","countIncorrect","count","countString","incDisabled","disabledSetReset","App","container","counter","buttons","buttonNames","inc","reset","CounterSettings","maxCountValue","event","value","currentTarget","startCountValue","classValueMaxDisabled","maxError","valueError","classValueStartDisabled","startError","setDisabled","counterSettings","maxValue","type","onChange","max","start","set","saveState","stateAsString","JSON","stringify","localStorage","setItem","setState","this","getItem","parse","restoreState","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.db58810d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__5HdUc\",\"container\":\"App_container__3M9fj\",\"counter\":\"App_counter__3gsAx\",\"counterSettings\":\"App_counterSettings__1ooDV App_counter__3gsAx\",\"countString\":\"App_countString__gPe9L\",\"upError\":\"App_upError__32usF\",\"countIncorrect\":\"App_countIncorrect__2l_j2\",\"buttons\":\"App_buttons__3Nezm\",\"button\":\"App_button__3y_Ah\",\"value\":\"App_value__eBivt\",\"valueError\":\"App_valueError__EUBUd App_value__eBivt\",\"maxValue\":\"App_maxValue__jrPJx\"};","import React from 'react';\r\nimport styles from './App.module.css';\r\n\r\nclass Button extends React.Component {\r\n\r\n    onClick = () => {\r\n        switch (this.props.name) {\r\n            case 'inc':\r\n                return this.props.upCount()\r\n            case 'reset':\r\n                return this.props.countReset()\r\n            case 'set':\r\n                return this.props.setCount()\r\n            default: alert('give me name function')\r\n        }\r\n    }\r\n\r\n    render = () => {\r\n\r\n        return (\r\n            <button className={styles.button}\r\n                    onClick={this.onClick}\r\n                    disabled={this.props.disabled}>\r\n                {this.props.name}\r\n            </button>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Button\r\n","import React from 'react';\r\nimport styles from './App.module.css';\r\nimport Button from \"./Button\";\r\n\r\nclass Counter extends React.Component {\r\n\r\n    render = () => {\r\n\r\n        let classCount = this.props.state.upError\r\n            ? styles.upError\r\n            : this.props.state.countIncorrect\r\n                ? styles.countIncorrect\r\n                : typeof (this.props.state.count) === \"string\"\r\n                    ? styles.countString\r\n                    : ''\r\n\r\n        let incDisabled = this.props.state.upError\r\n            || this.props.state.disabledSetReset\r\n\r\n        return (\r\n            <div className={styles.App}>\r\n                <div className={styles.container}>\r\n                    <div className={styles.counter}>\r\n                        <span className={classCount}>\r\n                            {this.props.state.count}\r\n                        </span>\r\n                    </div>\r\n                    <div className={styles.buttons}>\r\n                        <Button disabled={incDisabled}\r\n                                upCount={this.props.upCount}\r\n                                name={this.props.state.buttonNames.inc}/>\r\n                        <Button disabled={this.props.state.disabledSetReset}\r\n                                countReset={this.props.countReset}\r\n                                name={this.props.state.buttonNames.reset}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Counter\r\n","import React from 'react';\r\nimport styles from './App.module.css';\r\nimport Button from \"./Button\";\r\n\r\nclass CounterSettings extends React.Component {\r\n\r\n    maxCountValue = (event) => {\r\n        let value = +event.currentTarget.value\r\n        if (-5 < value && value < 20) {\r\n            this.props.maxCountValue(value)\r\n        } else {\r\n            alert('limit values from -4 to 19')\r\n        }\r\n    }\r\n\r\n    startCountValue = (event) => {\r\n        let value = +event.currentTarget.value\r\n        if (-5 < value && value < 20) {\r\n            this.props.startCountValue(value)\r\n        } else {\r\n            alert('limit values from -4 to 19')\r\n        }\r\n    }\r\n\r\n    render = () => {\r\n\r\n        let classValueMaxDisabled = this.props.state.maxError\r\n            ? styles.valueError : styles.value\r\n\r\n        let classValueStartDisabled = this.props.state.startError\r\n            ? styles.valueError : styles.value\r\n\r\n        let setDisabled = this.props.state.countIncorrect\r\n            || !this.props.state.disabledSetReset\r\n\r\n        return (\r\n            <div className={styles.App}>\r\n                <div className={styles.container}>\r\n                    <div className={styles.counterSettings}>\r\n                        <div>\r\n                            <span className={styles.maxValue}>max value:</span>\r\n                            <input className={classValueMaxDisabled}\r\n                                   type={'number'}\r\n                                   onChange={this.maxCountValue}\r\n                                   value={this.props.state.max}/>\r\n                        </div>\r\n                        <div>\r\n                            <span>start value:</span>\r\n                            <input className={classValueStartDisabled}\r\n                                   type={'number'}\r\n                                   onChange={this.startCountValue}\r\n                                   value={this.props.state.start}/>\r\n                        </div>\r\n                    </div>\r\n                    <div className={styles.buttons}>\r\n                        <Button disabled={setDisabled}\r\n                                name={this.props.state.buttonNames.set}\r\n                                setCount={this.props.setCount}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CounterSettings\r\n","export const removeLocalStorage = () => {\r\n    localStorage.removeItem('our-state')\r\n}\r\n\r\nexport const saveState = (state) => {\r\n    let stateAsString = JSON.stringify(state)\r\n    localStorage.setItem('our-state', stateAsString)\r\n}\r\n\r\nexport const restoreState = (state) => {\r\n    let stateAsString = localStorage.getItem('our-state')\r\n    if (stateAsString != null) {\r\n        state = JSON.parse(stateAsString)\r\n    }\r\n    return state\r\n}","import React from 'react';\r\nimport styles from './App.module.css';\r\nimport Counter from \"./Counter\";\r\nimport CounterSettings from \"./CounterSettings\";\r\nimport {restoreState, saveState} from \"./LocStorFunctions\";\r\n\r\nclass App extends React.Component {\r\n\r\n    state = {\r\n        count: \"enter values & press 'set'\",\r\n        max: 1,\r\n        start: 0,\r\n        countIncorrect: false,\r\n        maxError: false,\r\n        startError: false,\r\n        upError: false,\r\n        disabledSetReset: true,\r\n        buttonNames: {\r\n            inc: 'inc',\r\n            reset: 'reset',\r\n            set: 'set'\r\n        }\r\n    }\r\n\r\n    upCount = () => {\r\n        if (typeof (this.state.count) === \"number\") {\r\n            this.setState({\r\n                count: this.state.count + 1\r\n            }, () => {\r\n                if (this.state.count === this.state.max) {\r\n                    this.setState({\r\n                        upError: true\r\n                    })\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    countReset = () => {\r\n        this.setState({\r\n            count: this.state.start,\r\n            upError: false\r\n        })\r\n    }\r\n\r\n    maxCountValue = (value) => {\r\n        if (value < 1 || value < this.state.start) {\r\n            this.setState({\r\n                max: value,\r\n                maxError: true,\r\n                count: \"incorrect values\",\r\n                countIncorrect: true,\r\n            })\r\n        } else if (value === this.state.start) {\r\n            this.setState({\r\n                max: value,\r\n                maxError: true,\r\n                startError: true,\r\n                count: \"incorrect values\",\r\n                countIncorrect: true,\r\n            })\r\n        } else if (this.state.start < 0) {\r\n            this.setState({\r\n                max: value,\r\n                maxError: false,\r\n                count: \"incorrect values\",\r\n                countIncorrect: true,\r\n            })\r\n        } else {\r\n            this.setState({\r\n                max: value,\r\n                maxError: false,\r\n                startError: false,\r\n                count: \"enter values & press 'set'\",\r\n                countIncorrect: false,\r\n            })\r\n        }\r\n        this.setState({\r\n            disabledSetReset: true,\r\n            upError: false,\r\n        })\r\n    }\r\n\r\n    startCountValue = (value) => {\r\n        if (value <= -1 || value > this.state.max) {\r\n            this.setState({\r\n                start: value,\r\n                startError: true,\r\n                count: \"incorrect values\",\r\n                countIncorrect: true,\r\n            })\r\n        } else if (value === this.state.max) {\r\n            this.setState({\r\n                maxError: true,\r\n                start: value,\r\n                startError: true,\r\n                count: \"incorrect values\",\r\n                countIncorrect: true,\r\n            })\r\n        } else if (this.state.max < 0) {\r\n            this.setState({\r\n                start: value,\r\n                startError: false,\r\n                count: \"enter values & press 'set'\",\r\n                countIncorrect: false,\r\n            })\r\n        } else {\r\n            this.setState({\r\n                maxError: false,\r\n                start: value,\r\n                startError: false,\r\n                count: \"enter values & press 'set'\",\r\n                countIncorrect: false,\r\n            })\r\n        }\r\n        this.setState({\r\n            disabledSetReset: true,\r\n            upError: false,\r\n        })\r\n    }\r\n\r\n    setCount = () => {\r\n        this.setState({\r\n            count: this.state.start,\r\n            disabledSetReset: false,\r\n        }, () => {\r\n            saveState(this.state)\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState(restoreState())\r\n    }\r\n\r\n    render = () => {\r\n\r\n        return (\r\n            <div className={styles.App}>\r\n                <CounterSettings state={this.state}\r\n                                 maxCountValue={this.maxCountValue}\r\n                                 startCountValue={this.startCountValue}\r\n                                 setCount={this.setCount}/>\r\n                <Counter state={this.state}\r\n                         upCount={this.upCount}\r\n                         countReset={this.countReset}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}