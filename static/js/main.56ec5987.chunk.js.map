{"version":3,"sources":["App.module.css","Button.jsx","Counter.jsx","CounterSettings.jsx","LocStorFunctions.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","Button","onClick","props","render","className","styles","button","disabled","name","React","Component","Counter","classCount","isStartError","isMaxError","countIncorrect","isUpCountMax","upCountMax","isDataEntering","counterView","currentCount","incDisabled","resetDisabled","App","container","counter","buttons","upCount","countReset","CounterSettings","maxCountValue","event","currentTarget","value","startCountValue","classMaxError","valueError","classStartError","setDisabled","counterSettings","maxValue","type","onChange","maxCount","startCount","setCount","removeLocalStorage","localStorage","removeItem","saveState","state","stateAsString","JSON","stringify","setItem","restoreState","getItem","parse","componentDidMount","setState","countValue","alert","startValue","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.56ec5987.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__5HdUc\",\"container\":\"App_container__3M9fj\",\"counter\":\"App_counter__3gsAx\",\"upCountMax\":\"App_upCountMax__uS92B\",\"isDataEntering\":\"App_isDataEntering__2fsWG\",\"countIncorrect\":\"App_countIncorrect__2l_j2\",\"counterSettings\":\"App_counterSettings__1ooDV App_counter__3gsAx\",\"buttons\":\"App_buttons__3Nezm\",\"button\":\"App_button__3y_Ah\",\"value\":\"App_value__eBivt\",\"valueError\":\"App_valueError__EUBUd App_value__eBivt\",\"maxValue\":\"App_maxValue__jrPJx\"};","import React from 'react';\r\nimport styles from './App.module.css';\r\n\r\nclass Button extends React.Component {\r\n\r\n    onClick = () => {\r\n        this.props.onClick()\r\n    }\r\n\r\n    render = () => {\r\n\r\n        return (\r\n            <button className={styles.button}\r\n                    onClick={this.onClick}\r\n                    disabled={this.props.disabled}>\r\n                {this.props.name}\r\n            </button>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Button\r\n","import React from 'react';\r\nimport styles from './App.module.css';\r\nimport Button from \"./Button\";\r\n\r\nclass Counter extends React.Component {\r\n\r\n    render = () => {\r\n\r\n        let classCount = this.props.isStartError || this.props.isMaxError\r\n            ? styles.countIncorrect\r\n            : this.props.isUpCountMax\r\n                ? styles.upCountMax\r\n                : this.props.isDataEntering\r\n                    ? styles.isDataEntering\r\n                    : ''\r\n\r\n        let counterView = this.props.isStartError || this.props.isMaxError\r\n            ? \"incorrect values\"\r\n            : this.props.isUpCountMax || this.props.isDataEntering\r\n                ? this.props.currentCount\r\n                : \"enter values & press сет\"\r\n\r\n        let incDisabled = this.props.isMaxError\r\n            || this.props.isStartError\r\n            || !this.props.isDataEntering\r\n            || this.props.isUpCountMax\r\n\r\n        let resetDisabled = this.props.isMaxError\r\n            || this.props.isStartError\r\n            || !this.props.isDataEntering\r\n\r\n\r\n        return (\r\n            <div className={styles.App}>\r\n                <div className={styles.container}>\r\n                    <div className={styles.counter}>\r\n                        <span className={classCount}>\r\n                            {counterView}\r\n                        </span>\r\n                    </div>\r\n                    <div className={styles.buttons}>\r\n                        <Button disabled={incDisabled}\r\n                                onClick={this.props.upCount}\r\n                                name={'inc'}/>\r\n                        <Button disabled={resetDisabled}\r\n                                onClick={this.props.countReset}\r\n                                name={'reset'}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Counter\r\n","import React from 'react';\r\nimport styles from './App.module.css';\r\nimport Button from \"./Button\";\r\n\r\nclass CounterSettings extends React.Component {\r\n\r\n    maxCountValue = (event) => {\r\n        this.props.maxCountValue(+event.currentTarget.value)\r\n    }\r\n\r\n    startCountValue = (event) => {\r\n        this.props.startCountValue(+event.currentTarget.value)\r\n    }\r\n\r\n    render = () => {\r\n\r\n        let classMaxError = this.props.isMaxError\r\n            ? styles.valueError\r\n            : styles.value\r\n\r\n        let classStartError = this.props.isStartError\r\n            ? styles.valueError\r\n            : styles.value\r\n\r\n        let setDisabled = this.props.isMaxError\r\n            || this.props.isStartError\r\n            || this.props.isDataEntering\r\n\r\n        return (\r\n            <div className={styles.App}>\r\n                <div className={styles.container}>\r\n                    <div className={styles.counterSettings}>\r\n                        <div>\r\n                            <span className={styles.maxValue}>max value:</span>\r\n                            <input className={classMaxError}\r\n                                   type={'number'}\r\n                                   onChange={this.maxCountValue}\r\n                                   value={this.props.maxCount}/>\r\n                        </div>\r\n                        <div>\r\n                            <span>start value:</span>\r\n                            <input className={classStartError}\r\n                                   type={'number'}\r\n                                   onChange={this.startCountValue}\r\n                                   value={this.props.startCount}/>\r\n                        </div>\r\n                    </div>\r\n                    <div className={styles.buttons}>\r\n                        <Button disabled={setDisabled}\r\n                                name={\"set\"}\r\n                                onClick={this.props.setCount}/>\r\n                        <Button name={\"RLS\"}\r\n                                onClick={this.props.removeLocalStorage}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CounterSettings\r\n","export const removeLocalStorage = () => {\r\n    localStorage.removeItem('our-state')\r\n}\r\n\r\nexport const saveState = (state) => {\r\n    let stateAsString = JSON.stringify(state)\r\n    localStorage.setItem('our-state', stateAsString)\r\n}\r\n\r\nexport const restoreState = (state) => {\r\n    let stateAsString = localStorage.getItem('our-state')\r\n    if (stateAsString !== null) {\r\n        state = JSON.parse(stateAsString)\r\n    }\r\n    return state\r\n}","import React from 'react';\r\nimport styles from './App.module.css';\r\nimport Counter from \"./Counter\";\r\nimport CounterSettings from \"./CounterSettings\";\r\nimport {removeLocalStorage, restoreState, saveState} from \"./LocStorFunctions\";\r\n\r\nclass App extends React.Component {\r\n\r\n    componentDidMount = (state) => {\r\n        this.setState(restoreState(state))\r\n    }\r\n\r\n    state = {\r\n        currentCount: 0,\r\n        maxCount: 1,\r\n        startCount: 0,\r\n        isDataEntering: false,\r\n        isMaxError: false,\r\n        isStartError: false,\r\n        isUpCountMax: false,\r\n    }\r\n\r\n    maxCountValue = (maxValue) => {\r\n        if (maxValue > -1 && maxValue < 1000) {\r\n            this.setState({\r\n                maxCount: maxValue,\r\n            }, () => {\r\n                this.countValue(this.state.maxCount, this.state.startCount)\r\n            })\r\n        } else {\r\n            alert('limit values from 0 to 999')\r\n        }\r\n    }\r\n    startCountValue = (startValue) => {\r\n        if (startValue > -2 && startValue < 1000) {\r\n            this.setState({\r\n                startCount: startValue,\r\n            }, () => {\r\n                this.countValue(this.state.maxCount, this.state.startCount)\r\n            })\r\n        } else {\r\n            alert('limit values from -1 to 999')\r\n        }\r\n    }\r\n\r\n    countValue = (maxValue, startValue) => {\r\n        if (maxValue < 1 || maxValue <= startValue) {\r\n            this.setState({\r\n                isMaxError: true,\r\n            })\r\n        } else {\r\n            this.setState({\r\n                isMaxError: false,\r\n                isUpCountMax: false,\r\n                isDataEntering: false\r\n            })\r\n        }\r\n        if (startValue < 0 || startValue >= maxValue) {\r\n            this.setState({\r\n                isStartError: true,\r\n            })\r\n        } else {\r\n            this.setState({\r\n                isStartError: false,\r\n                isUpCountMax: false,\r\n                isDataEntering: false\r\n            })\r\n        }\r\n    }\r\n\r\n    setCount = () => {\r\n        this.setState({\r\n            currentCount: this.state.startCount,\r\n            isDataEntering: true\r\n        }, () => {\r\n            saveState(this.state)\r\n        })\r\n    }\r\n\r\n    upCount = () => {\r\n        this.setState({\r\n            currentCount: this.state.currentCount + 1\r\n        }, () => {\r\n            if (this.state.currentCount === this.state.maxCount) {\r\n                this.setState({\r\n                    isUpCountMax: true,\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    countReset = () => {\r\n        this.setState({\r\n            currentCount: this.state.startCount,\r\n            isUpCountMax: false\r\n        })\r\n    }\r\n\r\n    removeLocalStorage = () => {\r\n        removeLocalStorage()\r\n        let state = {\r\n            currentCount: 0,\r\n            maxCount: 1,\r\n            startCount: 0,\r\n            isDataEntering: false,\r\n            isMaxError: false,\r\n            isStartError: false,\r\n            isUpCountMax: false,\r\n        }\r\n        this.componentDidMount(state)\r\n    }\r\n\r\n    render = () => {\r\n\r\n        return (\r\n            <div className={styles.App}>\r\n                <CounterSettings\r\n                    maxCount={this.state.maxCount}\r\n                    startCount={this.state.startCount}\r\n                    isMaxError={this.state.isMaxError}\r\n                    isStartError={this.state.isStartError}\r\n                    isDataEntering={this.state.isDataEntering}\r\n                    maxCountValue={this.maxCountValue}\r\n                    startCountValue={this.startCountValue}\r\n                    countValue={this.countValue}\r\n                    removeLocalStorage={this.removeLocalStorage}\r\n                    setCount={this.setCount}\r\n                />\r\n                <Counter\r\n                    isMaxError={this.state.isMaxError}\r\n                    isStartError={this.state.isStartError}\r\n                    isUpCountMax={this.state.isUpCountMax}\r\n                    currentCount={this.state.currentCount}\r\n                    isDataEntering={this.state.isDataEntering}\r\n                    upCount={this.upCount}\r\n                    countReset={this.countReset\r\n                    }/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}