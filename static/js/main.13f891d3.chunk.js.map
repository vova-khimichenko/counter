{"version":3,"sources":["App.module.css","Button.jsx","CounterControl.jsx","CounterSettings.jsx","LocStorFunctions.jsx","store/counterReducer.js","App.jsx","serviceWorker.js","store/store.js","index.js"],"names":["module","exports","Button","props","className","styles","button","onClick","disabled","name","CounterControl","classCount","localState","isUpCountMax","upCountMax","isStartError","isMaxError","countIncorrect","isDataEntering","countNumber","counterView","reduxState","currentCount","incDisabled","resetDisabled","container","counter","style","alignItems","buttons","upCount","countReset","CounterSettings","classMaxError","valueError","value","classStartError","setDisabled","type","onChange","e","maxCountValue","currentTarget","maxCount","onKeyDown","key","toString","length","onBlur","onFocus","startCountValue","startCount","setCount","onRemoveLocalStorage","removeLocalStorage","localStorage","removeItem","saveState","state","stateAsString","JSON","stringify","setItem","restoreState","getItem","parse","initialState","App","maxValue","enterMaxValue","setState","startValue","enterStartValue","currentValue","resetCount","componentDidMount","LocStorState","render","React","Component","connect","Boolean","window","location","hostname","match","store","createStore","action","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.13f891d3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__5HdUc\",\"container\":\"App_container__3M9fj\",\"counter\":\"App_counter__3gsAx App_container__3M9fj\",\"buttons\":\"App_buttons__3Nezm App_counter__3gsAx App_container__3M9fj\",\"button\":\"App_button__3y_Ah App_counter__3gsAx App_container__3M9fj\",\"upCountMax\":\"App_upCountMax__uS92B\",\"countNumber\":\"App_countNumber__1sXOU\",\"countIncorrect\":\"App_countIncorrect__2l_j2\",\"value\":\"App_value__eBivt\",\"valueError\":\"App_valueError__EUBUd App_value__eBivt\"};","import React from 'react';\r\nimport styles from './App.module.css';\r\n\r\nexport const Button = (props) => {\r\n\r\n   const onClick = () => props.onClick()\r\n\r\n    return (\r\n        <button className={styles.button}\r\n                onClick={onClick}\r\n                disabled={props.disabled}>\r\n            {props.name}\r\n        </button>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport styles from './App.module.css';\r\nimport {Button} from \"./Button\";\r\n\r\nconst CounterControl = (props) => {\r\n\r\n    const onUpCount = () => props.upCount()\r\n    const onCountReset = () => props.countReset()\r\n\r\n    let classCount = props.localState.isUpCountMax\r\n        ? styles.upCountMax\r\n        : props.localState.isStartError || props.localState.isMaxError\r\n            ? styles.countIncorrect\r\n            : !props.localState.isDataEntering\r\n                ? styles.countNumber\r\n                : ''\r\n\r\n    let counterView = props.localState.isStartError || props.localState.isMaxError\r\n        ? \"incorrect values\"\r\n        : props.localState.isUpCountMax || !props.localState.isDataEntering\r\n            ? props.reduxState.currentCount\r\n            : \"enter values & press сет\"\r\n\r\n    let incDisabled = props.localState.isDataEntering\r\n        || props.localState.isUpCountMax\r\n        || props.localState.isMaxError\r\n        || props.localState.isStartError\r\n    let resetDisabled = props.localState.isDataEntering\r\n        || props.localState.isMaxError\r\n        || props.localState.isStartError\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <div className={styles.counter} style={{alignItems: 'center'}}>\r\n                <span className={classCount}>{counterView}</span>\r\n            </div>\r\n            <div className={styles.buttons}>\r\n                <Button disabled={incDisabled}\r\n                        onClick={onUpCount}\r\n                        name={'inc'}/>\r\n                <Button disabled={resetDisabled}\r\n                        onClick={onCountReset}\r\n                        name={'reset'}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CounterControl\r\n","import React from 'react';\r\nimport styles from './App.module.css';\r\nimport {Button} from \"./Button\";\r\n\r\nconst CounterSettings = (props) => {\r\n\r\n    const onSetCount = () => props.setCount()\r\n    const changeMaxCountValue = (e) => props.maxCountValue(+e.currentTarget.value)\r\n    const clearMaxCountValue = (e) => +e.currentTarget.value === 0\r\n        && props.maxCountValue('')\r\n    const backspacePressMax = (e) => e.key === 'Backspace'\r\n        && props.localState.maxCount.toString().length === 1\r\n        && props.maxCountValue('')\r\n    const defaultValueMax = () => props.localState.maxCount === ''\r\n        && props.maxCountValue(1)\r\n\r\n    const changeStartCountValue = (e) => props.startCountValue(+e.currentTarget.value)\r\n    const clearStartCountValue = (e) => +e.currentTarget.value === 0\r\n        && props.startCountValue('')\r\n    const backspacePressStart = (e) => e.key === 'Backspace'\r\n        && props.localState.startCount.toString().length === 1\r\n        && props.startCountValue('')\r\n    const defaultValueStart = () => props.localState.startCount === ''\r\n        && props.startCountValue(0)\r\n\r\n    let classMaxError = props.localState.isMaxError\r\n        ? styles.valueError\r\n        : styles.value\r\n\r\n    let classStartError = props.localState.isStartError\r\n        ? styles.valueError\r\n        : styles.value\r\n\r\n    let setDisabled = props.localState.isMaxError\r\n        || props.localState.isStartError\r\n        || !props.localState.isDataEntering\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <div className={styles.counter}>\r\n                <span>max value:<input className={classMaxError}\r\n                                       type={'number'}\r\n                                       onChange={changeMaxCountValue}\r\n                                       value={props.reduxState.maxCount}\r\n                                       onKeyDown={backspacePressMax}\r\n                                       onBlur={defaultValueMax}\r\n                                       onFocus={clearMaxCountValue}\r\n                />\r\n                </span>\r\n                <span>start value:<input className={classStartError}\r\n                                         type={'number'}\r\n                                         onChange={changeStartCountValue}\r\n                                         value={props.reduxState.startCount}\r\n                                         onKeyDown={backspacePressStart}\r\n                                         onBlur={defaultValueStart}\r\n                                         onFocus={clearStartCountValue}\r\n                />\r\n                </span>\r\n            </div>\r\n            <div className={styles.buttons}>\r\n                <Button disabled={setDisabled}\r\n                        name={\"set\"}\r\n                        onClick={onSetCount}/>\r\n                <Button name={\"RLS\"}\r\n                        onClick={props.onRemoveLocalStorage}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CounterSettings\r\n","export const removeLocalStorage = () => {\r\n    localStorage.removeItem('countState')\r\n}\r\n\r\nexport const saveState = (state) => {\r\n    let stateAsString = JSON.stringify(state)\r\n    localStorage.setItem('countState', stateAsString)\r\n}\r\n\r\nexport const restoreState = (state) => {\r\n    let stateAsString = localStorage.getItem('countState')\r\n    if (stateAsString !== null) {\r\n        state = JSON.parse(stateAsString)\r\n    }\r\n    return state\r\n}","let initialState = {\r\n    currentCount: null,\r\n    maxCount: 4,\r\n    startCount: 1\r\n}\r\n\r\nexport const counterReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'ENTER_MAX_VALUE':\r\n            return {\r\n                ...state,\r\n                maxCount: action.maxValue,\r\n            }\r\n        case 'ENTER_START_VALUE':\r\n            return {\r\n                ...state,\r\n                startCount: action.startValue,\r\n            }\r\n        case 'SET_COUNT':\r\n            return {\r\n                ...state,\r\n                currentCount: state.startCount,\r\n            }\r\n        case 'UP_COUNT':\r\n            return {\r\n                ...state,\r\n                currentCount: action.currentValue,\r\n            }\r\n        case 'RESET_COUNT':\r\n            return {\r\n                ...state,\r\n                currentCount: state.startCount,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const enterMaxValue = (maxValue) => ({type: 'ENTER_MAX_VALUE', maxValue})\r\nexport const enterStartValue = (startValue) => ({type: 'ENTER_START_VALUE', startValue})\r\nexport const setCount = () => ({type: 'SET_COUNT'})\r\nexport const upCount = (currentValue) => ({type: 'UP_COUNT', currentValue})\r\nexport const resetCount = () => ({type: 'RESET_COUNT'})\r\n","import React from 'react';\r\nimport styles from './App.module.css';\r\nimport CounterControl from \"./CounterControl\";\r\nimport CounterSettings from \"./CounterSettings\";\r\nimport {removeLocalStorage, restoreState, saveState} from \"./LocStorFunctions\";\r\nimport {connect} from \"react-redux\";\r\nimport {enterMaxValue, enterStartValue, resetCount, setCount, upCount} from \"./store/counterReducer\";\r\n\r\nclass App extends React.Component {\r\n\r\n    state = {\r\n        maxCount: this.props.maxCount,\r\n        startCount: this.props.startCount,\r\n        isDataEntering: true,\r\n        isMaxError: false,\r\n        isStartError: false,\r\n        isUpCountMax: false\r\n    }\r\n\r\n    maxCountValue = (maxValue) => {\r\n        this.props.enterMaxValue(maxValue)\r\n        this.setState({\r\n            maxCount: maxValue,\r\n            isUpCountMax: false\r\n        })\r\n        if (maxValue > 0 && maxValue <= 1000\r\n            && maxValue > this.state.startCount) {\r\n            this.setState({\r\n                isMaxError: false,\r\n                isDataEntering: true,\r\n            })\r\n        } else {\r\n            this.setState({\r\n                isMaxError: true\r\n            })\r\n        }\r\n        if (this.state.startCount > -1 && this.state.startCount <= 1000\r\n            && this.state.startCount < maxValue) {\r\n            this.setState({\r\n                isStartError: false,\r\n                isDataEntering: true,\r\n            })\r\n        } else {\r\n            this.setState({\r\n                isStartError: true\r\n            })\r\n        }\r\n    }\r\n\r\n    startCountValue = (startValue) => {\r\n        this.props.enterStartValue(startValue)\r\n        this.setState({\r\n            startCount: startValue,\r\n            isUpCountMax: false\r\n        })\r\n        if (startValue > -1 && startValue <= 1000\r\n            && startValue < this.state.maxCount) {\r\n            this.setState({\r\n                isStartError: false,\r\n                isDataEntering: true\r\n            })\r\n        } else {\r\n            this.setState({\r\n                isStartError: true\r\n            })\r\n        }\r\n        if (this.state.maxCount > 0 && this.state.maxCount <= 1000\r\n            && this.state.maxCount > startValue) {\r\n            this.setState({\r\n                isMaxError: false\r\n            })\r\n        } else {\r\n            this.setState({\r\n                isMaxError: true\r\n            })\r\n        }\r\n    }\r\n\r\n    setCount = () => {\r\n        this.props.setCount()\r\n        this.setState({\r\n            isDataEntering: false\r\n        }, () => {\r\n            saveState(this.props)\r\n        })\r\n    }\r\n\r\n    upCount = () => {\r\n        let currentValue = this.props.currentCount\r\n        currentValue += 1\r\n        this.props.upCount(currentValue)\r\n        currentValue === this.props.maxCount && this.setState({\r\n            isUpCountMax: true\r\n        })\r\n    }\r\n\r\n    countReset = () => {\r\n        this.props.resetCount()\r\n        this.setState({\r\n            isUpCountMax: false\r\n        })\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        let LocStorState = restoreState()\r\n        if (LocStorState) {\r\n            this.props.enterMaxValue(LocStorState.maxCount)\r\n            this.props.enterStartValue(LocStorState.startCount)\r\n        }\r\n    }\r\n\r\n    onRemoveLocalStorage = () => {\r\n        removeLocalStorage()\r\n    }\r\n\r\n    render = () => {\r\n        return (\r\n            <div className={styles.App}>\r\n                <CounterSettings\r\n                    reduxState={this.props}\r\n                    localState={this.state}\r\n                    maxCountValue={this.maxCountValue}\r\n                    startCountValue={this.startCountValue}\r\n                    setCount={this.setCount}\r\n                    onRemoveLocalStorage={this.onRemoveLocalStorage}\r\n                />\r\n                <CounterControl\r\n                    reduxState={this.props}\r\n                    localState={this.state}\r\n                    upCount={this.upCount}\r\n                    countReset={this.countReset}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => state\r\n\r\nexport default connect(mapStateToProps, {\r\n    setCount, resetCount, upCount, enterMaxValue, enterStartValue\r\n})(App)\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {createStore} from \"redux\";\r\nimport {counterReducer} from \"./counterReducer\";\r\n\r\nexport const store = createStore(counterReducer)\r\n\r\nwindow.store = store\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./store/store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n)\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}